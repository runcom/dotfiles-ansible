---
- hosts: all
  vars:
    username: amurdaca
  tasks:
    - name: include vars
      include_vars: vars/main.yml
    - name: add basic needed pkgs
      become: true
      dnf: name={{ item }} state=latest
      with_items:
        - unrar
        - vagrant-libvirt
        - fedora-packager
        - gofed
        - rust
        - cargo
        - mosh
        - asciidoc
        - git-email
        - terminator
        - zsh
        - cmake
        - htop
        - python-devel
        - ctags
        - vim-enhanced
        - jq
        - the_silver_searcher
        - vim-X11
        - ruby
        - ruby-devel
        - gnome-tweak-tool
        - gnome-shell-extension-pomodoro
        - graphviz
        - perl-Text-CharWidth
        - krb5-workstation
        - google-chrome-stable
        - golang
        - libvirt-sandbox
        - mercurial
        - golang-godoc
        - golang-github-cpuguy83-go-md2man
        - recode
        - ostree
        - python-ldap
        - pastebinit
        - 'dnf-command(system-upgrade)'
        - vlc
        - python-inotify
        - keepassx
        - terminus-fonts
        - overpass-fonts
        - pidgin
        - tmux
        - xclip
    - name: add pkgs needed to compile docker with hack/make.sh on host
      become: true
      dnf: name={{ item }} state=latest
      with_items:
        - device-mapper-devel
        - audit-libs-devel
        - glibc-static
        - systemd-devel
        - libseccomp-static
    - name: add pkgs needed to compile docker with rpmbuild
      become: true
      dnf: name={{ item }} state=latest
      with_items:
        - btrfs-progs-devel
        - selinux-policy-devel
        - sqlite-devel
    - name: add pkgs needed for --size in virt-builder
      become: true
      dnf: name={{ item }} state=latest
      with_items:
        - libguestfs-xfs
    - name: add group installs
      become: true
      dnf: name={{ item }} state=present
      with_items:
        - "@development-tools"
        - "@virtualization"
        - "@C Development Tools and Libraries"
    #- name: setup tmp dir to compile and install offlineimap
      #local_action: command mktemp -d
      #register: tempdir_offlineimap
    #- name: clone offlineimap git
      #git: repo=ssh://git@github.com/OfflineIMAP/offlineimap.git dest={{ tempdir_offlineimap.stdout }}
    #- name: compile and install offlineimap
      #shell: cd {{ tempdir_offlineimap.stdout  }} && make build && sudo python setup.py install
    #- name: purge offlineimap tmpdir
      #file: path={{ tempdir_offlineimap.stdout  }} state=absent
    #- name: copy gpg.rc for gpg2
      #copy: src=files/mutt/_gpg.rc dest=/home/{{ username }}/.gpg.rc backup=yes
    #- name: copy muttrc
      #template: src=templates/muttrc.j2 dest=/home/{{ username }}/.muttrc backup=yes
      #with_items:
        #- "{{ global }}"
    #- name: copy goobookrc
      #copy: src=files/mutt/_goobookrc dest=/home/{{ username }}/.goobookrc backup=yes
    #- name: copy offlineimaprc
      #template: src=templates/offlineimaprc.j2 dest=/home/{{ username }}/.offlineimaprc backup=yes
      #with_items:
        #- "{{ global }}"
    #- name: .mutt directory
      #file: path=/home/{{ username }}/.mutt state=directory
    #- name: copy mutt signature
      #template: src=templates/signature.j2 dest=/home/{{ username }}/.mutt/signature backup=yes
      #with_items:
        #- "{{ global }}"
    #- name: copy mutt colorscheme
      #copy: src=files/mutt/mutt-colors-solarized-dark-256.muttrc dest=/home/{{ username }}/.mutt/mutt-colors-solarized-dark-256.muttrc backup=yes
    #- name: copy mutt colorscheme patch
      #copy: src=files/mutt/mutt-patch-highlighting.muttrc dest=/home/{{ username }}/.mutt/mutt-patch-highlighting.muttrc backup=yes
    #- name: ensure .config/systemd/user
      #file: path=/home/{{ username }}/.config/systemd/user state=directory
    #- name: copy systemd for offlineimap mail.target
      #copy: src=files/mutt/mail.target dest=/home/{{ username }}/.config/systemd/user/mail.target backup=yes
    #- name: copy systemd for offlineimap service
      #copy: src=files/mutt/offlineimap@.service dest=/home/{{ username }}/.config/systemd/user/offlineimap@.service backup=yes
    #- name: copy systemd for offlineimap timer
      #copy: src=files/mutt/offlineimap@.timer dest=/home/{{ username }}/.config/systemd/user/offlineimap@.timer backup=yes
    #- name: install email_notifier
      #become: true
      #copy: src=files/mutt/email_notifier dest=/usr/local/bin/email_notifier owner=root group=root mode=755
    #- name: copy systemd for email_notifier
      #copy: src=files/mutt/emailnotifier.service dest=/home/{{ username }}/.config/systemd/user/emailnotifier.service backup=yes
    #- name: enable emailnotifier.service
      #systemd:
        #name: emailnotifier.service
        #state: started
        #enabled: yes
        #user: yes
    #- name: enable mail.target
      #systemd:
        #name: mail.target
        #enabled: yes
        #user: yes
    #- name: enable offlineimap@{{ username }}.service
      #systemd:
        #name: offlineimap@{{ username }}.service
        #enabled: no
        #user: yes
    #- name: enable offlineimap@{{ username }}.timer
      #systemd:
        #name: offlineimap@{{ username }}.timer
        #state: started
        #enabled: yes
        #user: yes
    - name: install private brew repo
      become: true
      copy: src=files/brew.repo dest=/etc/yum.repos.d/brew.repo backup=yes
    - name: install rhpkg
      become: true
      dnf: name=rhpkg state=latest enablerepo=brew
    - name: ensure $HOME/rh-scm
      file: path=/home/{{ username }}/rh-scm state=directory
    - name: install virtualbox.repo
      become: true
      get_url: url=http://download.virtualbox.org/virtualbox/rpm/fedora/virtualbox.repo dest=/etc/yum.repos.d/virtualbox.repo
    - name: no gpgcheck for virtualbox
      become: true
      shell: sed -i.bak s/gpgcheck=1/gpgcheck=0/g /etc/yum.repos.d/virtualbox.repo
    - name: install vbox deps
      become: true
      dnf: name={{ item }} state=latest
      with_items:
        - binutils
        - gcc
        - make
        - patch
        - libgomp
        - glibc-headers
        - glibc-devel
        - kernel-headers
        - kernel-devel
        - dkms
    - name: install vbox
      become: true
      dnf: name={{ item }} state=latest
      with_items:
        - VirtualBox-5.0
    - name: add $user to vbox group
      user: name={{ username }} groups=vboxusers append=yes
    - name: add docker group
      group: name=docker state=present
    - name: add $user to docker group
      user: name={{ username }} groups=docker append=yes
    - name: run fedora-packager-setup
      shell: fedora-packager-setup
    - name: add $user to mock group
      user: name={{ username }} groups=mock append=yes
    - name: ensure $home/fedora-scm
      file: path=/home/{{ username }}/fedora-scm state=directory
    - name: ensure $home/bin
      file: path=/home/{{ username }}/bin state=directory
    - name: install docker-changelog.sh
      get_url: url=https://gist.githubusercontent.com/runcom/fcd9b4ac8705e95d62666a3d594ca1a0/raw/b3f679e33224bd0dc8e873e9c7fd66893f1f376e/docker-changelog.sh dest=/home/{{ username }}/bin/docker-changelog mode=0755
    - name: install tlp repo
      become: true
      dnf: name=http://repo.linrunner.de/fedora/tlp/repos/releases/tlp-release-1.0-0.noarch.rpm disable_gpg_check=yes state=latest
    - name: install rpmfusion repo
      become: true
      shell: dnf install -y http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
    - name: enable tlp-updates
      become: true
      shell: dnf config-manager --set-enabled tlp-updates
    - name: enable tlp-updates-testing
      become: true
      shell: dnf config-manager --set-enabled tlp-updates-testing
    - name: update
      become: true
      shell: dnf update -y
    - name: install tlp tlp-rdw
      become: true
      dnf: name={{ item }} state=latest
      with_items:
        - tlp
        - tlp-rdw
    - name: tweak tlp
      become: true
      shell: sed -i.bak s/RESTORE_DEVICE_STATE_ON_STARTUP=0/RESTORE_DEVICE_STATE_ON_STARTUP=1/g /etc/default/tlp
    - name: install additional tlp stuff
      become: true
      dnf: name={{ item }} state=latest
      with_items:
        - akmod-tp_smapi
        - akmod-acpi_call
    - name: tweak journald
      become: true
      shell: sed -i.bak s/SystemMaxUse=/SystemMaxUse=16M/g /etc/systemd/journald.conf
    - name: systemd daemon reload
      become: true
      shell: systemctl daemon-reload
    - name: flash player 1
      become: true
      shell: rpm -ivh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm
    - name: flash player 2
      become: true
      shell: rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux
    - name: install flash player
      become: true
      dnf: name={{ item }} state=latest
      with_items:
        - flash-plugin
        - nspluginwrapper
        - alsa-plugins-pulseaudio
        - libcurl
    - name: tweak libvirtd
      become: true
      shell: sed -i.bak s/#user = "root"/user = "amurdaca"/g /etc/libvirt/qemu.conf
    - name: add $USER to qemu group
      user: name={{ username }} groups=qemu append=yes
    - systemd: name=libvirtd state=restarted
    - name: copy kem.sh
      copy: src=files/kem.sh dest=/home/{{ username }}/.kem.sh backup=yes
    - name: copy kem.sh desktop file
      copy: src=files/kensington_expert_mouse.desktop dest=/home/{{ username }}/.config/autostart/kensigton_expert_mouse.desktop backup=yes
    - name: cargo install rustfmt
      shell: cargo install rustfmt
    - name: install rust-debuginfo for src BZ#1385262
      become: true
      shell: dnf install -y --enablerepo fedora-debuginfo --enablerepo updates-debuginfo rust-debuginfo



      # TODO(runcom): install functions from runcom/dotfiles.install.sh



    # TODO install slack
    #
    # TODO(runcom):
    # cp files/tmux.conf $HOME/.tmux.conf
    # git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    #
    # TODO(runcom):
    # git clone git://git.suckless.org/st
    # copy files/st/config.h
    # sed -e "/@tic/d" -i Makefile
    # sudo make clean install
    # sudo cp files/st/st.desktop /usr/share/applications/
    #
    # TODO(runcom):
    # git clone, compile and install github/hub
